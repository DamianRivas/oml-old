/*
 * generated by Xtext 2.14.0
 */
package io.opencaesar.oml.dsl

import com.google.inject.Binder
import io.opencaesar.oml.dsl.settings.PreferenceValuesProvider
import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.formatting2.FormatterPreferenceValuesProvider
import org.eclipse.xtext.formatting2.FormatterPreferences
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.preferences.IPreferenceValuesProvider
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.scoping.IScopeProvider
import io.opencaesar.oml.dsl.conversion.OmlQualifiedNameConverter
import io.opencaesar.oml.dsl.conversion.OmlValueConverterService
import io.opencaesar.oml.dsl.naming.OmlQualifiedNameProvider
import io.opencaesar.oml.dsl.resource.OmlResourceDescriptionStrategy
import io.opencaesar.oml.dsl.scoping.OmlImportedNamespaceAwareLocalScopeProvider
import io.opencaesar.oml.dsl.scoping.OmlImportUriGlobalScopeProvider

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class OmlRuntimeModule extends AbstractOmlRuntimeModule {
	// workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=495851
	def void configureIPreferenceValuesProvider(Binder binder) {
		binder.bind(IPreferenceValuesProvider).annotatedWith(FormatterPreferences).to(FormatterPreferenceValuesProvider)
	}

	def Class<? extends IPreferenceValuesProvider> bindIPreferenceValuProvider() {
		PreferenceValuesProvider
	}

	def Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		OmlResourceDescriptionStrategy
	}

	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		OmlImportUriGlobalScopeProvider
	}

	override Class<? extends IScopeProvider> bindIScopeProvider() {
		OmlImportedNamespaceAwareLocalScopeProvider
	}

	override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		OmlQualifiedNameProvider
	}

	def Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		OmlQualifiedNameConverter
	}

	override Class<? extends IValueConverterService> bindIValueConverterService() {
		OmlValueConverterService
	}

}
